name: Vendor Translation Management

permissions:
  contents: write
  pull-requests: write
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    - cron: '*/5 * * * *'  # Test schedule - will be '0 0 14,28 * *' in production
  pull_request:
    types: [opened, synchronize, closed]
    branches: ['main']
    paths: ['vendor-translations/**']
  workflow_dispatch:

jobs:
  create-vendor-package:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Ensure GCS folder structure
        run: |
          gsutil ls gs://vendor_translations/latest-translations || gsutil mkdir gs://vendor_translations/latest-translations
          gsutil ls gs://vendor_translations/vendor-packages || gsutil mkdir gs://vendor_translations/vendor-packages
          gsutil ls gs://vendor_translations/archived-translations || gsutil mkdir gs://vendor_translations/archived-translations


      - name: Set date
        id: vars
        run: |
          echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT

      - name: Download Previous Translations
        run: |
          mkdir -p previous-translations
          gsutil cp "gs://vendor_translations/latest-translations/*.properties" previous-translations/ || echo "No previous translations found"

      - name: Create Vendor Package
        id: create-package
        run: |
          TEMP_DIR="vendor-package-${{ steps.vars.outputs.date }}"
          mkdir -p "$TEMP_DIR"
          
          # Copy current English file
          cp src/main/resources/messages_en.properties "$TEMP_DIR/"
          
          # Copy previous translations
          if [ -d "previous-translations" ]; then
            cp previous-translations/*.properties "$TEMP_DIR/" || echo "WARNING: Some previous translations couldn't be copied"
          fi

      - name: Upload Vendor Package
        run: |
          gsutil cp -r vendor-package-${{ steps.vars.outputs.date }}/* gs://vendor_translations/vendor-packages/${{ steps.vars.outputs.date }}/

      - name: Verify Package Upload
        run: |
          if ! gsutil ls gs://vendor_translations/vendor-packages/${{ steps.vars.outputs.date }}/* >/dev/null 2>&1; then
            echo "Error: Package files not found in GCS bucket"
            exit 1
          fi
          echo "Package files found in bucket:"
          gsutil ls -l gs://vendor_translations/vendor-packages/${{ steps.vars.outputs.date }}/*

      - name: Generate Signed URL
        id: signed-url
        run: |
          # Ensure the private key file is available
          echo "${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}" > /tmp/service-account-key.json

          # Generate signed URLs for all files in the vendor package
          URLS=$(gsutil signurl -d 7d /tmp/service-account-key.json gs://vendor_translations/vendor-packages/${{ steps.vars.outputs.date }}/*)
          
          # Extract and verify URLs
          echo "$URLS"
          FINAL_URLS=$(echo "$URLS" | grep -o 'https://storage.googleapis.com[^ ]*')
          if [ -z "$FINAL_URLS" ]; then
            echo "Error: Failed to generate signed URLs"
            exit 1
          fi

          echo "Generated URLs:"
          echo "$FINAL_URLS"
          
          # Save the first URL for email notification
          echo "signed_url=$(echo "$FINAL_URLS" | head -n 1)" >> $GITHUB_OUTPUT



      - name: Send Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: New Vendor Translation Package Available - ${{ steps.vars.outputs.date }}
          body: |
            A new vendor translation package has been created.
            
            Date: ${{ steps.vars.outputs.date }}
            Download Link (valid for 7 days): ${{ steps.signed-url.outputs.signed_url || 'URL generation failed - please contact support' }}
            
            Package Location: gs://vendor_translations/vendor-packages/${{ steps.vars.outputs.date }}/
            
            Best regards,
            Translation Automation System
          to: ashuthoshsk@outlook.com
          from: Translation System <${{ secrets.EMAIL_USERNAME }}>


  process-translations:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged != true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy Translations to Resources
        run: |
          cp -f vendor-translations/*.properties src/main/resources/
          echo "Copied translations to resources directory"

      - name: Generate GitHub App Token
        id: generate-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_APP_PRIVATE_KEY }}
          installation_retrieval_mode: 'repository'

      - name: Create Resource Update PR
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ steps.generate-token.outputs.token }}
          commit-message: "ðŸ”„: Update resource translations"
          title: "ðŸ”„: Update resource translations from vendor"
          body: |
            Updates resource translations from vendor-translations folder
            Original PR: #${{ github.event.pull_request.number }}
          branch: update-resources-${{ github.event.pull_request.number }}
          base: ${{ github.head_ref }}
          labels: resource-update
          reviewers: |
            Ashutoshsk

  store-vendor-translations:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Ensure GCS folder structure
        run: |
          gsutil ls gs://vendor_translations/latest-translations || gsutil mkdir gs://vendor_translations/latest-translations
          gsutil ls gs://vendor_translations/vendor-packages || gsutil mkdir gs://vendor_translations/vendor-packages
          gsutil ls gs://vendor_translations/archived-translations || gsutil mkdir gs://vendor_translations/archived-translations

      - name: Set date
        id: vars
        run: |
          echo "date=$(date +%Y%m%d)" >> $GITHUB_OUTPUT

      - name: Sync Translations
        run: |
          git fetch origin ${{ github.event.pull_request.head.ref }}
          git checkout origin/${{ github.event.pull_request.head.ref }} -- vendor-translations/
          git add vendor-translations/

      - name: Verify Translation Files
        run: |
          EXIT_CODE=0
          for file in vendor-translations/*.properties; do
            if [ ! -f "$file" ]; then
              echo "ERROR: Failed to read $file"
              EXIT_CODE=1
              continue
            fi
          
            if ! grep -q "=" "$file"; then
              echo "ERROR: Invalid format in $file - no property assignments found"
              EXIT_CODE=1
              continue
            fi
          
            echo "Verified: $file"
          done
          
          if [ $EXIT_CODE -ne 0 ]; then
            echo "ERROR: One or more translation files failed verification"
            exit 1
          fi
          
          echo "All vendor translation files verified successfully"

      - name: Upload to GCS
        run: |
          # Clear existing latest translations
          gsutil -m rm -r gs://vendor_translations/latest-translations/* || true
          
          # Upload new translations
          gsutil -m cp vendor-translations/*.properties gs://vendor_translations/latest-translations/
          
          # Also store dated version
          gsutil -m cp vendor-translations/*.properties gs://vendor_translations/archived-translations/${{ steps.vars.outputs.date }}/
